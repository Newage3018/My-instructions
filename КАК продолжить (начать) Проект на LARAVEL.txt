Новый (правка существующего проекта на LARAVEL)
1.Нужно для подключения к удаленному репозиторию на другой удаленной машине.
Получить url удаленной машины и пароль доступа. Еще для организации доступа к репозиторию 
посредством SSH нужно при помощи  GIT bash (командная строка) создать пару ключей public и 
private. команда: ssh-keygen. 

2.Использовать будем GIT bash (командная строка) или GIT GUI(графический интерфейс)

3.Первый вариант получить репозиторий -  скачать zip архив репозитория с GITLAB и разархивировать папку сайта на сервере

Второй вариант

Заходим в папку domains на сервере (openserver) и вводим команду (это делается из терминала Windows (в моем случае) - из консоли openserver не работает!!!)
Видимо не установлен git в openserver!? точнее нужно в настройках opensever на вкладке path выбрать 
git clone git@gitlab.com:cleargoal/million-ru.git laravel - здесь laravel - это папка кторую создаст git и куда склонирует репозиторий указанный в строке 

третий вариант 
В GIT GUI выбираем "Clone Existing Repository", следуем по порядку , указываем название новой локальной папки
, которая будет создана в указанном нами месте (лучше сразу указать папку на локальном сервере), 
после ввода пароля на доступ к репозиторию произойдет клонирование


4.Далее нужно установить в локальный проект COMPOSER: нужно (для open severa)
перейти в КОНСОЛЬ!!!!! (именно консоль - из терминала VS code  не работает!!!!) и ввести несколько команд:
для новых версий composer нужно посетить сайт композера и выбрать там указанные команды - как ниже ( только они будут актуальны по времени)

php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === 'a5c698ffe4b8e849a443b120cd5ba38043260d5c4023dbf93e1558871f1f07f58274fc6f4c93bcfd858c6bd0775cd8d1') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"

После этих команд composer установлен на сервере

5.Теперь переходим в папку нашего проекиа(сайта)

cd domains/laravel (laravel - папка проекта)

находясь в данной папке запускаем 

composer install 

В соответствии файлом composer.json composer произведет установку необходимых модулей в проект

На этом установка проекта на сервер завершена.

6. 
Иногда в момент установки composer на данном этапе могут посыпаться ошибки, причина которых не доустановленные модули
PHP, для этого ищем куда установлен PHP, находим папку установки и файл php.ini (ищем так вводим в терминале php --ini), открываем его и 
снимаем ";" перед теми модулями (extension),на которые ругается COMPOSER,
т.е. разрешаем их (например extension=fileinfo и extension=exif), если на Openserver, то нужно искать php.ini  в той
папке php, которая используется в настоящий момент ( указана в настройках) 


7.После установки composer, нужно в openserver создать новый домен (например laravel) в качестве папки указываем /laravel/public-
такой путь у меня

8.Открываем PHPmyADMIN создаем новую базу , и нового пользователя - эти данные( имя базы, имя пользователя, пароль пользователя) нужно прописать
 в файле .env (среда окружения), котjрый нужно получить от создателя проекта в виде файла (example.env), перименовать его в .env и 
положить в корень проекта, отредактировать (внести -( имя базы, имя пользователя, пароль пользователя) ).
Добавляем в файл в самом верху строку #ge

9.Произвести миграцию базы в локальный проект (на openserver из консоли )

php artisan migrate

php artisan storage:link

php artisan db:seed--class=BibleqoutesSeeder


10. Сайт откроется

11. Привяжем локальный репозиторий к удаленному
проверить есть ли удаленные репозитории
git remote (если есть такие то выведет список, если нет по пусто)
сначала удалим все возможно привязанные репозитории 

git remote remove <ИМЯ РЕПОЗИТОРИЯ>

далее привяжем нужный нам ( полученный от владельца в нашем случае git@gitlab.com:cleargoal/million-ru.gi)

git remote add dev git@gitlab.com:cleargoal/million-ru.git (где dev - это сокращенное имя (alias) для нашего
удаленного репозитория), при подключении запросит пароль который вводился при создании ssh-ключей.

12.Дальше можно втянуть master ветку 
git pull dev master

13.создать новую ветку 
git branch second

14.Синхронизируем с удаленным
git push dev second

15.Удалить ветку 
git branch -d second








 git status
 Текущее состояние

 git remote
 проверка наличия удаленных репозиториев

 git remote add dev intern_git@130.255.76.4:/home/intern_git/repositories/million-ru-dev.git - 
 добавление удаленного репозитория

 git remote remove dev
 удаление удаленного репозитория

 git pull dev master
 втянуть данные удаленного репозитория dev ветки master

 git push dev master
 передать данные в удаленный репозиторий dev в ветку master

 git branch testing
 создание новой ветки testing 

 git log
 показывает на какую ветку указывает HEAD (где мы находися на какой ветке и коммите) 

 git checkout testing
 переключение на ветку testing (В результате указатель HEAD переместится на ветку testing.)

 git commit

 git checkout -b iss53
 создать ветку iss53 и переключиться на нее (эквивалентно двум последовательным командам, ниже)
 git branch iss53 - создали
 git checkout iss53 - переключились

 слияние веток производим в два этапа
 git checkout master - переключаемся на основную (которая останется основной ветку)
 git merge hotfix - сливаем master и hotfix в master




 Вы должны иметь возможность установить свои учетные данные следующим образом:

git remote set-url origin https://<USERNAME>:<PASSWORD>@bitbucket.org/path/to/repo.git

Вы можете получить удаленный URL следующим образом:

git config --get remote.origin.url

Устанавливаем пользователя git на данном компе (имя пользователя и адрес почты)
git config --global user.name "igor artyushin"
git config --global user.email "artvid29@gmail.com"

Взгляд на проект (с гитом) со стороны файлового менеджера, если перейти на определенную ветку в терминале 
(git checkout <mybranch>), то в папках проекта окажутся файлы с таким содержимым, которое соответствующие данной 
ТЕКУЩЕЙ ВЕТКЕ!!!. Т.е если скопировать в этот момент проект в резервное хранилище  - то грубо - мы получим целиком
проект соответсвующий данной ветке, а если знать какие конкретно файлы изменяются в работе над веткой то можно скопировать
только их  - и тоже получим текущий проект( если добавим все остальные файлы). При переходе на другую ветку - изменятся задействованные
в этой ветке файлы - т.е в папках файлового менеджера будут другие версии файлов.
Если потом сравнивать такие файлы посредством файлового менеджера ( или другой удобной для сравнения проги)то 
 мы сможем увидеть разницу - т.е те изменения которые отличают одну ветвь от другой!!!!



вы можете использовать команду git pull. Она автоматически извлекает и затем сливает данные из удалённой ветки
 в вашу текущую ветку. Этот способ может для вас оказаться более простым или более удобным. К тому же по умолчанию 
команда git clone автоматически настраивает вашу локальную ветку master на отслеживание удалённой ветки master на сервере,
 с которого вы клонировали (подразумевается, что на удалённом сервере есть ветка master). Выполнение git pull, как правило,
 извлекает (fetch) данные с сервера, с которого вы изначально склонировали, и автоматически пытается слить (merge) их с кодом,
 над которым вы в данный момент работаете.






Ситуация когда у вас уже есть клон репозитория с которым вы работаете, делаете pull и смотрите что там какая то фигня накоммитчена от разработчиков.

Выбираем нужный бранч(ветку), у меня она master
git checkout master

делаем откат изменений в репозитории для примера на два коммита назад
git reset --hard HEAD~2

Можно сделать до какого то определенного коммита по хешу
git reset --hard HEAD hash
Хеш можно взять в вебинтерфейсе гитхаба.

Далее делаем принудительный коммит в основной репо на гитхабе
git push -f origin master
без -f будет ругаться что у вас версия младше чем в гитхабе и вам надо сделать pull




УДАЛЕННЫЙ ДОСТУП К САЙТУ НА OPENSERVER производим настройку OPENSERVER
всё, спасибо, разобрался. тему можно закрывать. Если кто-то заглянет - привожу решение своей проблемы:
Существовал сайт test.ru.
Существовал компьютер, подключенный к роутеру и получаемый адрес 192.168.1.10.
Существовало подключение роутера к интернету и полученный внешний IP-адрес, напр. 88.200.222.168.
Существовал (опционально) DynDNS-сервер - test.dyndns.com
Шаги для доступа к сайту извне:
1. Изменяем настройку OpenServer => Сервер => IP-адрес сервера => * (для доступа к серверу отовсюду!)
2. Пробрасываем 2 алиаса:
- 192.168.1.10 => test.ru (для доступа по локальной сети);
- 88.200.222.168 => test.ru (для доступа из внешней сети)
или
- test.dyndns.com => test.ru (для доступа из внешней сети если есть DynDNS).
Надеюсь, кому-то поможет это!
